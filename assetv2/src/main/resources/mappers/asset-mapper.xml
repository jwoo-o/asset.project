<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="asset">
  <select id="selectList" resultType="assetViewDto">
  select
		a.aNo,
		a.assetNo,
		(select DTL_C_NM from CMCDDTLM c4 where c4.GRP_C='category' and c4.DTL_C=a.category) category,
		(select DTL_C_NM from CMCDDTLM c where c.GRP_C='status' and c.DTL_C=a.status) status,
		a.modelNm,
		IFNULL(e.name,'') userName,
		IFNULL((select DTL_C_NM from CMCDDTLM c2 where c2.GRP_C='position' and c2.DTL_C=e.position),'') position,
		IFNULL((select DTL_C_NM from CMCDDTLM c1 where c1.GRP_C='division' and c1.DTL_C=e.division),'') division,
		a.buying,
		IFNULL((select DTL_C_NM from CMCDDTLM c3 where c3.GRP_C='mInch' and c3.DTL_C=a.mInch),'') mInch,
		a.note
	from asset a left outer join employee e on a.empNo=e.employeeNumber
    
	<where>
		<choose>
			<when test="status!=null and status!=''">
				and a.status=#{status}
			</when>
			<otherwise>
				and not a.status='d'
			</otherwise>
		</choose>
		<if test="userName!=null and userName!=''">
			and e.name like CONCAT('%',#{userName},'%')
		</if>
		<if test="assetNo!=null and assetNo!=''">
			and a.assetNo like CONCAT('%',#{assetNo},'%')
		</if>
		<if test="category!=null and category!=''">
			and a.category=#{category}
		</if>
		<if test="position!=null and position!=''">
			and e.position=#{position}
		</if>
		<if test="division!=null and division!=''">
			and e.division=#{division}
		</if>
		<if test="re_time!=null and re_time!=''">
			and re_time=#{re_time}
		</if>
		<if test="note!=null and note!=''">
			and a.note like CONCAT ('%',#{note},'%')
		</if>
		<if test="start_dt!=null and start_dt!=''">
			<![CDATA[and buying >= #{start_dt} ]]>
		</if>
		<if test="end_dt!=null and end_dt!=''">
			<![CDATA[and buying <= #{end_dt} ]]>
		</if>	
	</where>
		<if test="sort!=null and sort!=''">
			order by ${sort} ${key}
		</if>
    
    	
  </select>
  <insert id="insert">
  	insert into asset (assetNo,serialNo,modelNm,userName,empNo,position,division,buying,re_time,status,price,category,mInch,note,fstRgtWkrNm,fstRgtDtm,lstMdfWkrNm,lstMdfDtm) values(#{assetNo},#{serialNo},#{modelNm},#{userName},#{empNo},#{position},#{division},#{buying},#{re_time},#{status},#{price},#{category},#{mInch},#{note},#{fstRgtWkrNm},now(),#{lstMdfWkrNm},now())
  </insert>
  <update id="update">
  	update asset 
  	set 
  	userName=#{userName},empNo=#{empNo},
  	position=#{position},division=#{division},status=#{status},note=#{note},
  	lstMdfWkrNm=#{lstMdfWkrNm},lstMdfDtm=now() where aNo=#{aNo}
  </update>
  <update id="updateDl">
  	update asset set status='d',position='',division='',userName='',empNo='',
  	lstMdfWkrNm=#{lstMdfWkrNm},lstMdfDtm=now() where aNo=#{aNo}
  </update>
  <select id="select" resultType="assetVo">
  	select 
	a.aNo,a.assetNo,a.category,a.serialNo,a.buying,a.price,a.status,a.modelNm,a.note,a.mInch,
    e.name userName,
    e.employeeNumber empNo,e.position,e.division
    from asset a left outer join employee e on a.empNo=e.employeeNumber where a.aNo=#{aNo}
  </select>
  <select id="asNo" resultType="String">
  	select max(assetNo) from asset where category=#{category}
  	<if test="category1!=null and category!=''">
  		or category=#{category1}
  	</if>
  </select>
  <delete id="delete">
  	delete from asset where aNo=#{aNo}
  </delete>
  
  <select id="selectDown" resultType="assetDownDto">
  select
		a.aNo,
		a.assetNo,
		(select DTL_C_NM from CMCDDTLM c4 where c4.GRP_C='category' and c4.DTL_C=a.category) category,
		(select DTL_C_NM from CMCDDTLM c where c.GRP_C='status' and c.DTL_C=a.status) status,
		a.modelNm,
		a.serialNo,
		e.name userName,
		IFNULL((select DTL_C_NM from CMCDDTLM c2 where c2.GRP_C='position' and c2.DTL_C=e.position),'') position,
		IFNULL((select DTL_C_NM from CMCDDTLM c1 where c1.GRP_C='division' and c1.DTL_C=e.division),'') division,
		a.buying,
		IFNULL((select DTL_C_NM from CMCDDTLM c3 where c3.GRP_C='mInch' and c3.DTL_C=a.mInch),'') mInch,
		a.price,
		a.note
	from asset a left outer join employee e on a.empNo=e.employeeNumber
    
	<where>
		<choose>
			<when test="status!=null and status!=''">
				and a.status=#{status}
			</when>
			<otherwise>
				and a.status not in('d')
			</otherwise>
		</choose>
		<if test="userName!=null and userName!=''">
			and e.name like CONCAT('%',#{userName},'%')
		</if>
		<if test="assetNo!=null and assetNo!=''">
			and a.assetNo like CONCAT('%',#{assetNo},'%')
		</if>
		<if test="category!=null and category!=''">
			and a.category=#{category}
		</if>
		<if test="position!=null and position!=''">
			and e.position=#{position}
		</if>
		<if test="division!=null and division!=''">
			and e.division=#{division}
		</if>
		<if test="re_time!=null and re_time!=''">
			and re_time=#{re_time}
		</if>
		<if test="note!=null and note!=''">
			and a.note like CONCAT ('%',#{note},'%')
		</if>
		<if test="start_dt!=null and start_dt!=''">
			<![CDATA[and buying >= #{start_dt} ]]>
		</if>
		<if test="end_dt!=null and end_dt!=''">
			<![CDATA[and buying <= #{end_dt} ]]>
		</if>	
	</where>
		<if test="sort!=null and sort!=''">
			order by ${sort} ${key}
		</if>   	
  </select>
  
  <update id="empMdf">
  	update asset
  	<set>
  	<if test="name==null or name==''">
  	empNo='',
  	</if>
  	status=#{status},division=#{division},position=#{position},userName=#{name},note=#{note},lstMdfDtm=now(),lstMdfWkrNm=#{lstMdfWkrNm}
  	</set> 
  	where empNo=#{empNo} 
  </update>
  
  <select id="row" resultType="chartDto">
  	<!--  select 
	(select cmNm from cmcd c1 where c1.cmCd=#{key} and c1.cmNo=e.#{key}) as key
	,count(${key}) as count from asset group by ${key}-->
	select 
		<choose>
			<when test="categorys=='buying'">
				year(${categorys}) categorys,
			</when>
			<when test="categorys=='position' or categorys=='division'">
				IFNULL((select DTL_C_NM from CMCDDTLM c1 where c1.GRP_C=#{categorys} and c1.DTL_C=${categorys}),'보관') categorys,
			</when>
			
		</choose>
			count(${categorys}) as count from asset 
			where
				not status='d'
		<choose>
			<when test="categorys=='buying'">
				group by categorys
			</when>
			<when test="categorys=='position' or categorys=='division'">
				group by ${categorys}
			</when>
		</choose>
  </select>
</mapper>